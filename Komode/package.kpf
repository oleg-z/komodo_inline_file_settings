<?xml version="1.0" encoding="UTF-8"?>
<!-- Komodo Project File - DO NOT EDIT -->
<project id="83754587-f631-4863-8153-29e60a94480d" kpf_version="3">
<macro keyboard_shortcut="" name="Komode" language="JavaScript" trigger_enabled="1" rank="100" trigger="trigger_postopen" async="1" idref="83754587-f631-4863-8153-29e60a94480d" id="917e12df-bdd9-4c90-9843-eb3fe402a49a">
/**\n * Komode  v1.0  (pun intended)                             ______\n * Modeline Support for Komodo IDE 4.0                      \\     \\\n * copyright Â© 2007 Sean Coates                            |`\\_____\\\n *  sean[ta]php.net                                        |` |    |\n *                                            __-====-__   |  |    |\n * You may do anything you                   (~&lt;       &gt;~&gt;_|  |    |\n * like with this macro                      {~~-====--~~:  \\ |    |\n * after April 1, 2007.                       \\~------~~/----`+----/\n *                                             \\         \\___     /\n * This code is made available                  &gt;------\\     \\  &lt;\n * under the Fair License.                     &lt;_________________&gt;\n *\n * Usage of the works is permitted provided that this instrument is retained\n * with the works, so that any entity that uses the works is notified of this\n * instrument. DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY. \n * (http://www.opensource.org/licenses/fair.txt)\n *\n * Commode art borrowed from: http://www.scopie.com/asciiart/toilet.asp\n *\n * To use:\n *  Add a line, like above (komode: params=go here). Must be either at the\n *  start of a line, or preceded by a whitespace character.\n *\n *  Parameters:\n *   lineends|linends|le: Line ending format (should be autodetected, anyway)\n *   language|syntax: Use this language for UDL parsing\n *   codepage: file codepage/encoding. Use utf8. You know you want to.\n *   tabwidth|tab: size of tab sharacters\n *   tabs|notabs: don't expand (or do) tab characters\n *   indentwidth: size of indents\n *\n * Note: it also respects some vi[m] directives, but a komode line will\n *  trump these.\n *\n * Note2: if a tabwidth is set, but indentwidth is not, indentwidth assumes\n *  the value of tabwidth. This is probably what you want in the first place,\n *  but if it isn't, just set the indentwidth explicitly.\n *\n * Here's the komode line for this file:\n * komode: le=unix language=javascript codepage=utf8 tab=4 notabs indent=4\n *  Enjoy.\n */\n\n/**\n * Globals\n */\nvar statusMsgTxt = "[komode] ";\n\nvar foundTabWidth = false;\nvar foundIndentWidth = false;\n\n/**\n * Parses the file buffer for modeline directives\n */\nfunction parseBuffer()\n{\n    // have to separate these because we want (e.g.) vim to take precedence over vi\n    findParseLine(/(^|[\\n\\r\\s])((vi):\\s*)(.+)[\\r\\n]?/i); // Vi\n    findParseLine(/(^|[\\n\\r\\s])((vim):\\s*)(.+)[\\r\\n]?/i); // Vim\n    findParseLine(/(^|[\\n\\r\\s])((vim6\\d+):\\s*)(.+)[\\r\\n]?/i); // Vim6\n    findParseLine(/(^|[\\n\\r\\s])((komode):\\s*)(.+)[\\r\\n;]?/i); // Komodo\n    \n    if (!!(!foundIndentWidth &amp;&amp; foundTabWidth)) {\n        // assume that the indent width should be the tab width:\n        komodo.koDoc.indentWidth = komodo.koDoc.tabWidth;\n        statusMsg("Set indent width to: " + komodo.koDoc.indentWidth);\n    }\n}\n\n/**\n * Find and parse a modeline\n *\n * @param   object  rx  Regular expression to match line.\n *                      Submatches 3 and 4 must be the line type and params,\n *                      respectively.\n */\nfunction findParseLine(rx)\n{\n    var komodeLine;\n    // search for Komode line:\n    if (true == !!(komodeLine = komodo.koDoc.buffer.match(rx))) {\n\n        // match #3 contains the mode type\n        statusMsg(komodeLine[3] + ": ", false);\n        \n        // match #4 contains the params; split it into pieces\n        var modeParts = String(komodeLine[4]).toLowerCase().split(/\\s+/);\n        for (var part in modeParts) {\n            if (modeParts.hasOwnProperty(part)) { // tricky inheritance bit: Crockford\n                handleMode(modeParts[part]);\n            }\n        }\n    }\n}\n\n/**\n * Helper function to display a status message in Komodo (overwrites itself)\n *\n * @param   string  msg     Message to display\n * @param   Bool    addSemi Append a semi-colon to the message? (default: true)\n */\nfunction statusMsg(msg, addSemi)\n{\n    // default:\n    if (typeof(addSemi) == 'undefined') {\n        addSemi = true;\n    }\n    \n    statusMsgTxt = statusMsgTxt + msg;\n    if (addSemi) {\n        statusMsgTxt = statusMsgTxt + "; ";\n    }\n    \n    // [re]display message for 10 seconds\n    StatusBar_AddMessage(statusMsgTxt, "editor", 10000, true);\n}\n\n/**\n * Actually handle the mode directive.\n *\n * @param   string  part    key=value, or just key\n */\nfunction handleMode(part)\n{\n    var mode = part.split(/=/);\n    \n    switch (mode[0]) {\n        \n        // @@ Line Endings\n        case 'lineends':        // komodo\n        case 'linends':\n        case 'le':\n        case 'fileformat':      // vim\n        case 'ff':\n            // change new line endings..\n            if (mode.length &gt; 1) {\n                // which line ending should we use?\n                switch (mode[1]) {\n                    case '0':             // EOL_LF\n                    case 'lf':\n                    case 'unix':\n                        komodo.koDoc.new_line_endings = 0;\n                        statusMsg("Set line endings: unix (lf)");\n                        break;\n                    case '1':             // EOL_CR\n                    case 'cr':\n                    case 'mac':\n                        komodo.koDoc.new_line_endings = 1;\n                        statusMsg("Set line endings: mac (cr)");\n                        break;\n                    case '2':             // EOL_CRLF\n                    case 'crlf':\n                    case 'win':\n                    case 'windows':\n                        komodo.koDoc.new_line_endings = 2;\n                        statusMsg("Set line endings: win (crlf)");\n                        break;\n                }\n            }\n            break;\n        \n        // @@ Language/syntax\n        case 'language':        // komodo\n        case 'syntax':          // vim\n        case 'syn':\n            // set document language:\n            if (mode.length &gt; 1) {\n                var actualLang;\n                if (!!(actualLang = isValidLanguage(mode[1]))) {\n                    komodo.koDoc.language = actualLang;\n                    statusMsg("Set langage to: " + actualLang);\n                }\n            }\n            break;\n        \n        // @@ Codepage (might want to implement encoding at some point...)\n        case 'codepage':        // komodo\n        case 'fileencoding':    // vim\n        case 'fenc':\n            if (mode.length &gt; 1) {\n                switch (mode[1]) {\n                    case 'unicode':\n                    case 'utf-8':\n                    case 'utf8':\n                    case '65001':\n                        komodo.koDoc.codePage = 65001;\n                        statusMsg("Set Codepage to: utf-8");\n                        break;\n                    \n                    case 'latin-1':\n                    case 'latin1':\n                    case '850':\n                        komodo.koDoc.codePage = 850;\n                        statusMsg("Set Codepage to: latin-1");\n                        break;\n                        \n                    case 'canadian':\n                    case 'frenchcanadian':\n                    case '863':\n                        komodo.koDoc.codePage = 863;\n                        statusMsg("Set Codepage to: french Canadian (Hey, I'm from Canadia)");\n                        break;\n                }\n            }\n            break;\n        \n        // @@ tab width\n        case 'tabwidth':    // komodo\n        case 'tab':\n        case 'tabstop':     // vim\n        case 'ts':\n            if (mode.length &gt; 1 &amp;&amp; !!(mode[1] = parseInt(mode[1]))) {\n                komodo.koDoc.tabWidth = mode[1];\n                foundTabWidth = mode[1];\n                statusMsg("Set tab width to: " + mode[1]);\n            }\n            break;\n        \n        // @@ use tabs? (see "don't use tabs", below)\n        case 'usetabs':         // komodo\n        case 'tabs':\n        case 'noexpandtabs':    // vim\n        case 'noet':\n            ko.views.manager.currentView.scimoz.useTabs = true;\n            statusMsg("Set 'use tabs' to: true");\n            break;\n            \n        // @@ don't use tabs? (see "use tabs", above)\n        case 'nousetabs':       // komodo\n        case 'notabs':\n        case 'expandtabs':      // vim\n        case 'et':\n            ko.views.manager.currentView.scimoz.useTabs = false;\n            statusMsg("Set 'use tabs' to: false");\n            break;\n        \n        // @@ indent width\n        case 'indentwidth':     // komodo\n        case 'indent':\n        case 'shiftwidth':      // vim\n        case 'sw':\n            if (mode.length &gt; 1 &amp;&amp; !!(mode[1] = parseInt(mode[1]))) {\n                komodo.koDoc.indentWidth = mode[1];\n                foundIndentWidth = mode[1];\n                statusMsg("Set indent width to: " + mode[1]);\n            }\n            break;\n            \n    }\n}\n\n/**\n * Check Komodo's internal language hierarchy to make sure we're setting a\n * valid language.\n *\n * @param   string  lang    language name\n * @return  string  false if no match, actual (cased) language name if match\n */\nfunction isValidLanguage(lang)\n{\n    // I guessed at this; there's probably a simpler way to do it.\n    var langService = Components.classes["@activestate.com/koLanguageRegistryService;1"].getService(Components.interfaces.koILanguageRegistryService);\n    var langHierarchy = langService.getLanguageHierarchy();\n    \n    // names changed to protect the innocent (think of the children!):\n    var nodes = new Object();\n    \n    langHierarchy.getChildren(nodes, {});\n    nodes = nodes.value;\n    \n    for (i=0;i&lt;nodes.length;i++)  {\n        if (String(nodes[i].name).toLowerCase() == lang) {\n            return String(nodes[i].name);\n        }\n    }\n    return false;\n}\n\n// Starsky: Seriously, do it. Do it. Do it. \nparseBuffer();\n\n// [eof]\n</macro>
<macro keyboard_shortcut="" name="Flush the Komode" language="JavaScript" trigger_enabled="0" rank="100" trigger="trigger_postopen" async="0" idref="83754587-f631-4863-8153-29e60a94480d" id="c361d650-2215-4a2b-9ee0-f2790601620f">
/**\n * Flush the Komode v1.0   (pun intended)                   ______\n * Modeline Builder for Komodo IDE 4.0                      \\     \\\n * copyright Â© 2007 Sean Coates                            |`\\_____\\\n *  sean[ta]php.net                                        |` |    |\n *                                            __-====-__   |  |    |\n * You may do anything you                   (~&lt;       &gt;~&gt;_|  |    |\n * like with this macro                      {~~-====--~~:  \\ |    |\n * after April 1, 2007.                       \\~------~~/----`+----/\n *                                             \\         \\___     /\n * This code is made available                  &gt;------\\     \\  &lt;\n * under the Fair License.                     &lt;_________________&gt;\n *\n * Usage of the works is permitted provided that this instrument is retained\n * with the works, so that any entity that uses the works is notified of this\n * instrument. DISCLAIMER: THE WORKS ARE WITHOUT WARRANTY. \n * (http://www.opensource.org/licenses/fair.txt)\n *\n * Commode art borrowed from: http://www.scopie.com/asciiart/toilet.asp\n *\n * To use:\n * You probably want to be running my komode script (in the same package as\n * this macro).\n *\n * Simply position your cursor where you'd like to insert (flush) a komode\n * line for the current buffer, and launch the script.\n *\n * The script will put something like the following into your document:\n * komode: le=unix language=javascript codepage=utf8 tab=4 notabs indent=4\n */\n\n/**\n * line endings\n */\nfunction getLe()\n{\n    switch (komodo.koDoc.new_line_endings) {\n        case 0: // EOL_LF\n           return 'unix';\n           break;\n    \n        case 1: // EOL_CR\n           return 'mac';\n           break;\n    \n        case 2: // EOL_CRLF\n           return 'win';\n           break;\n    \n    }\n    return 'other'; // should never actually get this\n}\n\n/**\n * Code Page\n */\nfunction getCodePage()\n{\n    switch (komodo.koDoc.codePage) {\n        case 65001:\n            return 'utf8';\n            break;\n        \n        case 850:\n            return 'latin1';\n            break;\n        \n        case 863:\n            return 'frenchcanadian';\n            break;    \n    }\n    return false; // other, unsupportedâuse utf8!\n}\n\nvar komodeLine = " komode:";\n\n// line endings\nvar le;\nif (!!(le = getLe())) {\n    komodeLine += " le=" + le;\n}\n\n// language/syntax\nkomodeLine += " language=" + komodo.koDoc.language.toLowerCase();\n\n// code page\nvar codePage;\nif (!!(codePage = getCodePage())) {\n    komodeLine += " codepage=" + codePage;\n}\n\n// tab width\nkomodeLine += " tab=" + komodo.koDoc.tabWidth;\n\n// use tabs\nkomodeLine += " " + ( ko.views.manager.currentView.scimoz.useTabs ? 'tabs' : 'notabs' );\n\n// indent width\nkomodeLine += " indent=" + komodo.koDoc.indentWidth;\n\n// Starsky: Seriously, do it. Do it. Do it. \nkomodo.editor.insertText(komodo.editor.currentPos, komodeLine);\nStatusBar_AddMessage("[komode] flushed.", "editor", 5000, true);\n\n// [eof]\n</macro>
<preference-set idref="83754587-f631-4863-8153-29e60a94480d">
  <boolean id="import_live">1</boolean>
</preference-set>
</project>
